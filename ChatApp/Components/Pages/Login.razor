@page "/login"
@using ChatApp.Client.Models
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using ChatApp.Data
@using System.Security.Claims
@inject UsersRepository Users
@inject NavigationManager NavigationManager

<PageTitle>Login</PageTitle>

@if (HttpContext.User.Identity!.IsAuthenticated) {
    <h1>You are already logged in as @(HttpContext.User.FindFirstValue(ClaimTypes.Name))</h1>
    
    <form action="api/Logout" method="post" class="col-md-5">
        <AntiforgeryToken />
        <input type="hidden" name="ReturnUrl" value="\" />
        <button class="w-100 btn btn-lg btn-secondary" type="submit">
            Logout
        </button>
    </form>
}
else {
    <h1>Log in</h1>
    <div class="row">
        <div class="col-md-5">
            <section>
                
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="loginForm">
                    <h2>Use a local account to log in.</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Login" class="form-control" autocomplete="false" aria-required="true" placeholder="name@example.com" />
                        <label for="email" class="form-label">Email</label>
                        <ValidationMessage For="() => Input.Login" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Password</label>
                        <ValidationMessage For="() => Input.Password" class="text-danger" />
                    </div>
                    <div class="checkbox mb-3">
                        <label class="form-label">
                            <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                            Remember me
                        </label>
                    </div>
                    <div class="text-danger text-center py-3">@errorMessage</div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                    </div>
                </EditForm>           
            </section>
        </div>
    </div>
}



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private void ButtonClick(MouseEventArgs args)
    {
        Console.WriteLine("ButtonClicked");
    }


    public async Task LogoutUser()
    {
        Console.WriteLine("LogoutUser called");
        await HttpContext.SignOutAsync();
    }

    public async Task LoginUser()
    {
        User? user = Users.GetByLogin(Input.Login);
        if (user == null) {
            errorMessage = "Error: Invalid login attempt.";
            return;
        }

        var claims = new List<Claim>
        {
            new Claim(ClaimTypes.Name, Input.Login),
            new Claim(ClaimTypes.NameIdentifier, Input.Login)
        };

        var claimsIdentity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);

        var authProperties = new AuthenticationProperties
        {
            AllowRefresh = true,
        };

        await HttpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, new ClaimsPrincipal(claimsIdentity), authProperties);
        NavigationManager.NavigateTo("\\");

        /*
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            if (result.Succeeded)
            {
            Logger.LogInformation("User logged in.");
        RedirectManager.RedirectTo(ReturnUrl);
            }
            else if (result.RequiresTwoFactor)
                {
                RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
            {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
            {
            errorMessage = "Error: Invalid login attempt.";
        }
    */
    }

    [Microsoft.AspNetCore.Mvc.IgnoreAntiforgeryToken(Order = 2000)]
    private sealed class InputModel
    {
        [Required]
        public string Login { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}