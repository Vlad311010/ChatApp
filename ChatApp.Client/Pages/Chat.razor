@page "/chat/{chatName}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using ChatApp.Client.Models
@using ChatApp.Client.Services
@using ChatApp.Client.ViewComponents
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject ApiAccess MessagesService
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@implements IAsyncDisposable

@attribute [Authorize]

<PageTitle>Chat</PageTitle>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

@if (chatMessages != null) {
<div class="chat-window" id="messagesList">
    @foreach (var message in chatMessages)
    {
        if (currentUserId == message.UserId)
        {
            <ChatMessage type="sent" messageModel="message" />
        }
        else
        {
            <ChatMessage type="received" messageModel="message" />
        }
    }
</div>
}


@code {
    [Parameter]
    public string ChatName { get; set; } = string.Empty;

    private HubConnection? hubConnection;
    private List<Message> chatMessages = default!;

    private int currentUserId = -1;
    private string currentUserName = "";
    private string? messageInput;


    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<int, string, int, string>("ReceiveMessage", (userId, userName, chatId, message) =>
        {
            AddMessage(userId, userName, chatId, message);
        });

        hubConnection.On<string>("GroupConnect", (message) =>
        {
            Console.WriteLine(message);
        });

        hubConnection.On<string>("GroupDisconnect", (message) =>
        {
            Console.WriteLine(message);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("AddToGroup", ChatName);

        chatMessages = await MessagesService.GetMessagesAsync(ChatName);

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Int32.TryParse(state.User.FindFirst("UserId")?.Value, out currentUserId);
        currentUserName = state.User.Identity!.Name!;
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput) && hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentUserId, currentUserName, ChatName, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void AddMessage(int senderId, string senderName, int chatId, string message) 
    {
        chatMessages.Add(new Message(senderId, senderName, chatId, message));// TODO: Use actual createAt time
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromGroup", ChatName);
            await hubConnection.DisposeAsync();
        }
    }
}