@page "/chat/{chatName}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using ChatApp.Client.Models
@using ChatApp.Client.Services
@using ChatApp.Client.ViewComponents
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject ApiAccess MessagesService

@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

@if (chatMessages != null) {
<div class="chat_window" id="messagesList">
    @foreach (var message in chatMessages)
    {
        <ChatMessage type="sent" messageModel="message" />
        <ChatMessage type="received" messageModel="message" />
    }
    <div class="container mt-3 chat-message">
        <div class="received mb-3 p-3 border rounded">
            <div class="d-flex justify-content-between">
                <div class="sender-name fw-bold">John Doe</div>
                <div class="timestamp text-muted">12:34 PM</div>
            </div>
            <div class="message-content mt-2">
                This is a sample chat message content.
            </div>
        </div>
    </div>
        <div class="container mt-3 chat-message">
            <div class="sent mb-3 p-3 border rounded">
                <div class="d-flex justify-content-between">
                    <div class="timestamp text-muted">12:34 PM</div>
                    <div class="sender-name fw-bold">You</div>
                </div>
                <div class="message-content mt-2">
                    This is a sample chat message content.
                </div>
            </div>
        </div>
</div>
}


@code {
    [Parameter]
    public string ChatName { get; set; } = string.Empty;

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    private HubConnection? hubConnection;
    private List<Message> chatMessages = default!;
    private int currentUsedId = -1;

    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<string, string, string>("ReceiveMessage", (userIdStr, chatIdStr, message) =>
        {
            int userId;
            int chatId;

            if (Int32.TryParse(userIdStr, out userId) && Int32.TryParse(chatIdStr, out chatId))
            {
                AddMessage(userId, chatId, message);
            }
            // else message error

        });

        hubConnection.On<string>("GroupConnect", (message) =>
        {
            Console.WriteLine(message);
        });

        hubConnection.On<string>("GroupDisconnect", (message) =>
        {
            Console.WriteLine(message);
        });

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("AddToGroup", ChatName);

        chatMessages = await MessagesService.GetMessagesAsync(ChatName);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                Console.WriteLine($"{user.Identity.Name} is authenticated.");
            }
            else
            {
                Console.WriteLine("authenticated Failed Inner");
            }
        }
        else
        {
            Console.WriteLine("authenticated Failed");
        }

    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput) && hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", "1", ChatName, messageInput);
        }
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    private void AddMessage(int senderId, int chatId, string message) 
    {
        var encodedMsg = $"{message}";
        chatMessages.Add(new Message(senderId, chatId, encodedMsg));
        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromGroup", ChatName);
            await hubConnection.DisposeAsync();
        }
    }
}