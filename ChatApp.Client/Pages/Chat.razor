@page "/chat/{chatName}"
@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using ChatApp.Client.Models
@using ChatApp.Client.Services
@using ChatApp.Client.Components
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@inject ApiAccess Api
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject ClientSideEvents Events
@inject IJSRuntime JS
@implements IAsyncDisposable

@attribute [Authorize]

<script>

    AddOnScrollEvent = () => {
        const scroll = document.getElementById("chat-window");
        scroll.addEventListener("scroll", (event) => {
            if (scroll.scrollTop === 0) {
                event.preventDefault();
                event.stopPropagation();
                scroll.scrollTop = 20; 
                DotNet.invokeMethodAsync('ChatApp.Client', 'ChatTopReached');
            };
        })
    };
</script>
<PageTitle>Chat</PageTitle>

<SpinnerComponent IsLoading=@(isLoading)>
<div class="chat-window text-center @(!isChatMember ? "bg-dark bg-gradient text-white" : "") " id="chat-window" @ref=chatWindow>
    @if (!isChatMember)
    {
        @if (!string.IsNullOrEmpty(chatDescription))
        {
            <h4 class="py-5">Chat Description</h4>
            <div>
                @chatDescription
            </div>
        }
    }
    else
    {
        @foreach (var message in chatMessages)
        {
            if (currentUserId == message.UserId)
            {
                <ChatMessage type="sent" messageModel="message" />
            }
            else
            {
                <ChatMessage type="received" messageModel="message" />
            }
        }
    }
    </div>
    
    <hr>

    @if (!isChatMember) 
    {
        <div class="chat-input-container">
            <button @onclick="JoinChat" class="w-100 btn-join" disabled="@(!IsConnected)">Join Chat</button>
        </div>
    }
    else 
    {
        <div class="chat-input-container">
            <input @bind="messageInput" @onkeyup="Enter" type="text" id="chatInput" class="chat-input" placeholder="Type your message...">
            <button @onclick="Send" class="btn-send" disabled="@(!IsConnected)">Send</button>
            <button @onclick="async () => {await LoadMessages().ContinueWith((_) => isLoading = false); }" class="btn-send" disabled="@(!IsConnected)">Load</button>
        </div>

        
    }
</SpinnerComponent>



@code {
    [Parameter]
    public string ChatName { get; set; } = string.Empty;


    private string chatDescription = "";

    private ElementReference chatWindow;
    private ElementReference lastMessage;

    private HubConnection? hubConnection;
    private List<Message> chatMessages = new List<Message>();

    private int? topMessageId = null;
    private bool isChatMember = false;
    private int currentUserId = -1;
    private string currentUserName = "";
    private string? messageInput;
    private bool isLoading = true;
    private string? lastLoadedMessage;

    private const int messagesPerRequest = 5;

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender && !isLoading)
        {
            await JS.InvokeVoidAsync("AddOnScrollEvent");
            await ScrollToBottom();
        }
    }

    private async Task ScrollToBottom()
    {
        await JS.InvokeVoidAsync("ScrollToBottom", chatWindow);
    }

    private async Task ScrollTo(string elementId)
    {
        await JS.InvokeVoidAsync("ScrollTo", elementId);
    }

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();


        hubConnection.On<int, string, int, string>("ReceiveMessage", (userId, userName, chatId, message) =>
        {
            AddMessage(userId, userName, chatId, message);
        });

        hubConnection.On<string>("GroupConnect", (message) =>
        {
            // Console.WriteLine(message);
        });

        hubConnection.On<string>("GroupDisconnect", (message) =>
        {
            // Console.WriteLine(message);
        });

        Events.onChatGroupJoin += ReloadChat;

        await hubConnection.StartAsync();

        await hubConnection.SendAsync("AddToGroup", ChatName);

        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        Int32.TryParse(state.User.FindFirst("UserId")?.Value, out currentUserId);
        currentUserName = state.User.Identity!.Name!;

        isChatMember = await Api.IsChatParticipantAsync(ChatName, currentUserName);


        if (!isChatMember) 
        {
            isLoading = false;
            chatDescription = await Api.GetChatDescription(ChatName);
        }
        else 
            await LoadMessages().ContinueWith((_) => isLoading = false);

        onChatTopReached += LoadMessages;
    }


    private async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            await Send();
        }
    }


    private async Task JoinChat()
    {
        if (hubConnection is not null)
        {
            await Api.JoinChat(ChatName);
            isChatMember = true;
            StateHasChanged();
        }
    }    

    private static Func<Task> onChatTopReached;
    [JSInvokable]
    public static async Task ChatTopReached()
    {
        if (onChatTopReached != null)
        {
            await onChatTopReached();
        }
    }

    private async Task LoadMessages()
    {
        List<Message> requestMessages;

        requestMessages = topMessageId == null
        ? await Api.GetMessagesAsync(ChatName, messagesPerRequest)
        : await Api.GetMessagesAsync(ChatName, (int)topMessageId, messagesPerRequest);

        if (requestMessages.Count > 0)
            topMessageId = requestMessages[0].Id;

        if (chatMessages.Count == 0)
            lastLoadedMessage = "message-" + requestMessages.Last().Id;
        else 
            lastLoadedMessage = "message-" + chatMessages[0].Id;
        
        chatMessages.InsertRange(0, requestMessages);
        StateHasChanged();
        await ScrollTo(lastLoadedMessage);
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(messageInput) && hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", currentUserId, currentUserName, ChatName, messageInput);
            messageInput = "";
        }
    }


    private void AddMessage(int senderId, string senderName, int chatId, string message) 
    {
        chatMessages.Add(new Message(senderId, senderName, chatId, message));// TODO: Use actual createAt time
        StateHasChanged();
    }

    private void ReloadChat(string chatName)
    {
        Navigation.NavigateTo($"/chat/{chatName}", true);
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("RemoveFromGroup", ChatName);
            await hubConnection.DisposeAsync();
        }
        Events.onChatGroupJoin -= ReloadChat;
    }
}