@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using ChatApp.Client.Models
@using ChatApp.Client.Services
@using ChatApp.Client.Components
@inject ApiAccess Api
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject ClientSideEvents Events
@inject NavigationManager NManager
@implements IDisposable


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChatApp</a>
        <AuthorizeView>
            <Authorized>
                <a class="navbar-brand word-trim">@context.User.Identity?.Name</a>
            </Authorized>
            <NotAuthorized>
                <a class="navbar-brand word-trim">Anon</a>
            </NotAuthorized>
        </AuthorizeView>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">
    <NavMenuTabs>
        <ChatsTabContent>
            <SpinnerComponent IsLoading="@isLoading">
                @if (userChats != null && userChats.Length > 0)
                {
                    <div class="nav-item px-3">
                        @foreach (ChatGroup chat in userChats)
                        {
                            <div class="w-100 d-flex justify-content-between word-trim">
                                <NavLink class="nav-link word-trim" href="@("chat/" + chat.Name)">
                                    <span>@chat.Name</span>
                                </NavLink>
                                <div class="d-flex">
                                    @if (chat.OwnerId == userId)
                                    {
                                        <a href="@("chat/" + chat.Name + "/invite")" type="button" class="mt-3 mb-3">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="green" class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                                                <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                                                <path fill-rule="evenodd" d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5" />
                                            </svg>
                                        </a>
                                    }
                                    <span @onclick='async () => { await Api.LeaveChat(chat.Name); }' type="button" class="mt-3 mb-3">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="red" class="bi bi-x-square-fill" viewBox="0 0 16 16">
                                            <path d="M2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2zm3.354 4.646L8 7.293l2.646-2.647a.5.5 0 0 1 .708.708L8.707 8l2.647 2.646a.5.5 0 0 1-.708.708L8 8.707l-2.646 2.647a.5.5 0 0 1-.708-.708L7.293 8 4.646 5.354a.5.5 0 1 1 .708-.708"></path>
                                        </svg>
                                    </span>
                                </div>
                            </div>
                        }
                    </div>
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="chat/create">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle-fill" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0M8.5 4.5a.5.5 0 0 0-1 0v3h-3a.5.5 0 0 0 0 1h3v3a.5.5 0 0 0 1 0v-3h3a.5.5 0 0 0 0-1h-3z" />
                        </svg>
                        New Chat Group
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="home">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" type="button" @onclick="Refresh">
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-repeat" viewBox="0 0 16 16">
                            <path d="M11.534 7h3.932a.25.25 0 0 1 .192.41l-1.966 2.36a.25.25 0 0 1-.384 0l-1.966-2.36a.25.25 0 0 1 .192-.41m-11 2h3.932a.25.25 0 0 0 .192-.41L2.692 6.23a.25.25 0 0 0-.384 0L.342 8.59A.25.25 0 0 0 .534 9" />
                            <path fill-rule="evenodd" d="M8 3c-1.552 0-2.94.707-3.857 1.818a.5.5 0 1 1-.771-.636A6.002 6.002 0 0 1 13.917 7H12.9A5 5 0 0 0 8 3M3.1 9a5.002 5.002 0 0 0 8.757 2.182.5.5 0 1 1 .771.636A6.002 6.002 0 0 1 2.083 9z" />
                        </svg>
                        Refresh
                    </NavLink>
                </div>

            </SpinnerComponent>
        </ChatsTabContent>

        <BrowseTabContent>
            @if (publicChats != null && publicChats.Length > 0)
            {
                <div class="nav-item px-3">
                    @foreach (ChatGroup chat in publicChats)
                    {
                        <div class="w-100 d-flex justify-content-between word-trim">
                            <NavLink class="nav-link word-trim" href="@("chat/" + chat.Name)">
                                @(chat.Name)
                            </NavLink>
                        </div>
                    }
                </div>
            }
        </BrowseTabContent>
    </NavMenuTabs>
</div>

@code {
    private ChatGroup[] userChats;
    private ChatGroup[] publicChats;

    private bool isLoading = false;
    private bool browseTabSelected = false;
    private string userName = "";
    private int userId = -1;

    private async void UpdateAuthenticationState(Task<AuthenticationState> task)
    {
        publicChats = await Api.PublicChats();

        AuthenticationState state = await task;
        if (state.User.Identity!.IsAuthenticated)
        {
            userName = state.User.Identity!.Name!;
            Int32.TryParse(state.User.FindFirst("UserId")!.Value, out userId);
            isLoading = true;
            userChats = await Api.MyChats().ContinueWith((res) => { isLoading = false; return res.Result; });
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += UpdateAuthenticationState;
        UpdateNavMenu();
        Events.onChatGroupJoin += UpdateNavMenu;
        Events.onChatGroupLeave += UpdateNavMenu;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= UpdateAuthenticationState;
        Events.onChatGroupJoin -= UpdateNavMenu;
        Events.onChatGroupLeave -= UpdateNavMenu;
    }

    private void UpdateNavMenu(string _ = "")
    {
        UpdateAuthenticationState(AuthenticationStateProvider.GetAuthenticationStateAsync());
    }


    private void ChatsTabClick()
    {
        browseTabSelected = false;
    }

    private void BrowseTabClick()
    {
        browseTabSelected = true;
    }

    private void Refresh()
    {
        NManager.NavigateTo(NManager.Uri, true);
    }

}

