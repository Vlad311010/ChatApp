@rendermode @(new InteractiveWebAssemblyRenderMode(prerender: false))
@using ChatApp.Client.Models
@using ChatApp.Client.Services
@using ChatApp.Client.Components
@inject ApiAccess Api
@inject CustomAuthenticationStateProvider AuthenticationStateProvider
@inject ClientSideEvents Events
@implements IDisposable


<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">ChatApp</a>
        @if (userName != "")
        {
            <a class="navbar-brand">@userName</a>
        }
    </div>
</div>


<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable" onclick="document.querySelector('.navbar-toggler').click()">

    <nav>
        <div class="nav nav-tabs" id="nav-tab" role="tablist">
            <button @onclick="ChatsTabClick" class="w-50 nav-link @(browseTabSelected ? "text-white" : "active")" id="nav-chats-tab" data-bs-toggle="tab" data-bs-target="#nav-home" type="button" role="tab" aria-controls="nav-home" aria-selected="true">My Chats</button>
            <button @onclick="BrowseTabClick" class="w-50 nav-link @(!browseTabSelected ? "text-white" : "active")" id="nav-browse-tab" data-bs-toggle="tab" data-bs-target="#nav-profile" type="button" role="tab" aria-controls="nav-profile" aria-selected="false">Browse</button>
        </div>
    </nav>

    <nav class="flex-column">
        @if (!browseTabSelected)
        {
            <SpinnerComponent IsLoading="@isLoading">
                @if (userChats != null && userChats.Length > 0)
                {
                    <div class="nav-item px-3">
                        @foreach (ChatGroup chat in userChats)
                        {

                            <NavLink class="nav-link" href="@("chat/" + chat.Name)">
                                @(chat.Name)
                            </NavLink>
                        }
                    </div>
                }

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="chat/create">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> New Chat Group
                    </NavLink>
                </div>

                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="home">
                        <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Home
                    </NavLink>
                </div>

            </SpinnerComponent>
        }
        else
        {
            @if (publicChats != null && publicChats.Length > 0)
            {
                <div class="nav-item px-3">
                    @foreach (ChatGroup chat in publicChats)
                    {
                        <NavLink class="nav-link" href="@("chat/" + chat.Name)">
                            @(chat.Name)
                        </NavLink>
                    }
                </div>
            }
        }
    </nav>
</div>

@code {
    private ChatGroup[] userChats;
    private ChatGroup[] publicChats;

    private bool isLoading = false;
    private bool browseTabSelected = false;
    private string userName = "";

    private async void UpdateAuthenticationState(Task<AuthenticationState> task)
    {
        publicChats = await Api.PublicChats();

        AuthenticationState state = await task;
        if (state.User.Identity!.IsAuthenticated)
        {
            userName = state.User.Identity!.Name!;
            isLoading = true;
            userChats = await Api.MyChats().ContinueWith((res) => { isLoading = false; return res.Result; });
        }
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += UpdateAuthenticationState;
        UpdateNavMenu();
        Events.onChatJoin += UpdateNavMenu;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= UpdateAuthenticationState;
        Events.onChatJoin -= UpdateNavMenu;
    }

    private void UpdateNavMenu()
    {
        UpdateAuthenticationState(AuthenticationStateProvider.GetAuthenticationStateAsync());
    }


    private void ChatsTabClick()
    {
        browseTabSelected = false;
    }

    private void BrowseTabClick()
    {
        browseTabSelected = true;
    }

}

